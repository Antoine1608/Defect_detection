{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8657156,"sourceType":"datasetVersion","datasetId":5186409},{"sourceId":8681061,"sourceType":"datasetVersion","datasetId":5204180},{"sourceId":8709459,"sourceType":"datasetVersion","datasetId":5224472},{"sourceId":8719276,"sourceType":"datasetVersion","datasetId":5231752},{"sourceId":8773628,"sourceType":"datasetVersion","datasetId":5272853},{"sourceId":8780911,"sourceType":"datasetVersion","datasetId":5278152},{"sourceId":63937,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":53320}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# TESTING LH_04_","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport os\nimport time\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nimport keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import preprocess_input","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-25T09:03:00.119778Z","iopub.execute_input":"2024-06-25T09:03:00.120205Z","iopub.status.idle":"2024-06-25T09:03:13.407541Z","shell.execute_reply.started":"2024-06-25T09:03:00.120172Z","shell.execute_reply":"2024-06-25T09:03:13.406468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"DATA = r\"/kaggle/input/data-20/Archive_20\"\nMODEL = keras.saving.load_model(\"/kaggle/input/model_tot_crop/keras/model_crop_tot/1/model_crop_tot.keras\")","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:13.409739Z","iopub.execute_input":"2024-06-25T09:03:13.410675Z","iopub.status.idle":"2024-06-25T09:03:17.108428Z","shell.execute_reply.started":"2024-06-25T09:03:13.410635Z","shell.execute_reply":"2024-06-25T09:03:17.107362Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Préparation des images\nimg = plt.imread(r\"/kaggle/input/data-archive-13/Archive_13/LH_00004_04_OK (2).bmp\")\ntaille_img = img.shape\ntaille_img","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:17.110036Z","iopub.execute_input":"2024-06-25T09:03:17.110443Z","iopub.status.idle":"2024-06-25T09:03:17.131342Z","shell.execute_reply.started":"2024-06-25T09:03:17.110394Z","shell.execute_reply":"2024-06-25T09:03:17.130344Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_start, y_end = 0, int(taille_img[0]/(4*3))\nx_start, x_end = int(taille_img[1]/3.4), int(taille_img[0]/(4*3)+int(taille_img[1]/3.4))\nimg_cropped = img[y_start:y_end, x_start:x_end]\nplt.imshow(img_cropped)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:17.132773Z","iopub.execute_input":"2024-06-25T09:03:17.133460Z","iopub.status.idle":"2024-06-25T09:03:17.392729Z","shell.execute_reply.started":"2024-06-25T09:03:17.133427Z","shell.execute_reply":"2024-06-25T09:03:17.391714Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def preparation_image_test(dir, dir_crop):\n    \n    for img in os.listdir(dir):#os.path.join(dir)):\n        # Load the image\n        image_path = os.path.join(dir, img)\n        #+ r\"/input/\"         \n        image = cv2.imread(image_path)\n\n        # Define the coordinates of the top-left corner and the bottom-right corner of the window\n        #x_start, y_start = 50, 50  # Top-left corner\n        #x_end, y_end = 200, 200    # Bottom-right corner\n\n        # Crop the window\n        cropped_image = image[y_start:y_end, x_start:x_end]\n\n        # Créer le dossier s'il n'existe pas\n        dossier = dir_crop \n        os.makedirs(dossier, exist_ok=True)\n\n        # Chemin d'accès pour sauvegarder l'image préparée\n        cropped_image_path = os.path.join(dossier, img)\n\n        # Sauvegarder l'image au même nom que l'image d'origine\n        cv2.imwrite(cropped_image_path, cropped_image)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:17.395483Z","iopub.execute_input":"2024-06-25T09:03:17.395822Z","iopub.status.idle":"2024-06-25T09:03:17.403011Z","shell.execute_reply.started":"2024-06-25T09:03:17.395795Z","shell.execute_reply":"2024-06-25T09:03:17.401949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"DATA_CROP = \"DATA_CROP/crop\"\npreparation_image_test(DATA, DATA_CROP)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:17.404227Z","iopub.execute_input":"2024-06-25T09:03:17.404558Z","iopub.status.idle":"2024-06-25T09:03:25.189802Z","shell.execute_reply.started":"2024-06-25T09:03:17.404523Z","shell.execute_reply":"2024-06-25T09:03:25.188926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Inférence\ndatagen_test = ImageDataGenerator(rescale=1./255,\n                               height_shift_range=False,\n                               horizontal_flip=False,\n                               validation_split=0,\n                               preprocessing_function=preprocess_input)\n\ntest_generator = datagen_test.flow_from_directory(\n    \"DATA_CROP\",\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset=None\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:25.190971Z","iopub.execute_input":"2024-06-25T09:03:25.191259Z","iopub.status.idle":"2024-06-25T09:03:25.244627Z","shell.execute_reply.started":"2024-06-25T09:03:25.191234Z","shell.execute_reply":"2024-06-25T09:03:25.243633Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n#35s pour 7000 images\n\n# Créer un générateur d'images pour la prédiction\npredict_datagen = ImageDataGenerator(\n    rescale=1./255,\n    preprocessing_function=preprocess_input\n)\n\n# Spécifiez le répertoire contenant le répertoire contenant les images pour la prédiction\nPREDICT_DIR = \"DATA_CROP\" #+ r\"/NOK\"\n\npredict_generator = predict_datagen.flow_from_directory(\n    PREDICT_DIR,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode=None,\n    shuffle=False,\n    seed=42\n)\n\n# Faire les prédictions\npredictions = MODEL.predict(predict_generator, steps=len(predict_generator), verbose=1)\n\n# Récupérer les noms de fichiers pour lier les prédictions aux images\nfilenames = predict_generator.filenames\n\n# Associer chaque fichier d'image à sa prédiction\nliste_defaut = []\nfor filename, prediction in zip(filenames, predictions):\n    predicted_class = np.argmax(prediction)\n    if predicted_class == 1:\n        print(f\"Image: {filename} - Prediction: {predicted_class}\")\n        liste_defaut.append(filename)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:25.246077Z","iopub.execute_input":"2024-06-25T09:03:25.246810Z","iopub.status.idle":"2024-06-25T09:03:33.506328Z","shell.execute_reply.started":"2024-06-25T09:03:25.246773Z","shell.execute_reply":"2024-06-25T09:03:33.505302Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"os.makedirs(\"/kaggle/working/resultat\",exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:33.507562Z","iopub.execute_input":"2024-06-25T09:03:33.507870Z","iopub.status.idle":"2024-06-25T09:03:33.514347Z","shell.execute_reply.started":"2024-06-25T09:03:33.507844Z","shell.execute_reply":"2024-06-25T09:03:33.513249Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Visualisation des défauts\nfig, ax = plt.subplots(1+len(liste_defaut)//3, 3, figsize=(15,40))\nax = ax.flatten()\nfor idx, filename in enumerate(liste_defaut) : \n    filename_tot = os.path.join(DATA, os.path.basename(filename))\n    #cv2.imwrite(os.path.join(\"/kaggle/working/resultat\",os.path.basename(filename)), cv2.imread(filename_tot))\n    ax[idx].imshow(plt.imread(filename_tot))\n    date_creation = time.ctime(os.path.getctime(filename_tot))\n    ax[idx].set_title(f\"{os.path.basename(filename_tot)} {date_creation}\",fontsize=6)\n    ax[idx].axis('off')","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:33.515729Z","iopub.execute_input":"2024-06-25T09:03:33.516112Z","iopub.status.idle":"2024-06-25T09:03:34.537420Z","shell.execute_reply.started":"2024-06-25T09:03:33.516073Z","shell.execute_reply":"2024-06-25T09:03:34.536488Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Exporter la liste des images NC\nexport = pd.DataFrame({\"NC\":liste_defaut})\nexport.to_csv(\"resultat.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:34.538820Z","iopub.execute_input":"2024-06-25T09:03:34.539475Z","iopub.status.idle":"2024-06-25T09:03:34.550677Z","shell.execute_reply.started":"2024-06-25T09:03:34.539437Z","shell.execute_reply":"2024-06-25T09:03:34.549671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Exporter les images NC dans un zipfile\nimport zipfile\n\nsource_dir = \"/kaggle/working/resultat\" \nzip_file = '/kaggle/working/resultat.zip'\n\nwith zipfile.ZipFile(zip_file, 'w') as zip_ref: \n    # Iterate through the contents of the source folder \n    for root, _, files in os.walk(source_dir): \n        for file in files: # Create a relative path for each file \n            file_path = os.path.join(root, file)\n            # Add the file to the ZIP archive\n            zip_ref.write(file_path, arcname=file)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T09:03:34.552206Z","iopub.execute_input":"2024-06-25T09:03:34.552551Z","iopub.status.idle":"2024-06-25T09:03:34.559691Z","shell.execute_reply.started":"2024-06-25T09:03:34.552525Z","shell.execute_reply":"2024-06-25T09:03:34.558762Z"},"trusted":true},"execution_count":null,"outputs":[]}]}