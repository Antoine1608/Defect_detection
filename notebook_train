{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8612877,"sourceType":"datasetVersion","datasetId":5154601}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# TRAINING","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport os\nimport shutil\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json\nfrom pprint import pprint\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import label_binarize, LabelEncoder\nfrom sklearn.utils import class_weight, shuffle\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, GlobalAveragePooling2D\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras.utils import to_categorical\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n#from tensorflow.keras.utils import to_categorical\n\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.preprocessing import image\n\n#from plot_keras_history import show_history, plot_history\n\nimport tensorflow as tf\n\n# For normalization and preparation\nimport cv2\nfrom skimage.exposure import match_histograms\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\n\n#For tiling\nfrom PIL import Image","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:13:43.068831Z","iopub.execute_input":"2024-06-09T14:13:43.069566Z","iopub.status.idle":"2024-06-09T14:13:43.079166Z","shell.execute_reply.started":"2024-06-09T14:13:43.069537Z","shell.execute_reply":"2024-06-09T14:13:43.078212Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"shutil.rmtree(\"/kaggle/working/TRAIN\",ignore_errors=True)\nshutil.rmtree(\"/kaggle/working/DATA_CROP_TRAIN\",ignore_errors=True)\nshutil.rmtree(\"/kaggle/working/DATA_CROP\",ignore_errors=True)\n#shutil.rm(\"models\")","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:10.186434Z","iopub.execute_input":"2024-06-09T13:40:10.186795Z","iopub.status.idle":"2024-06-09T13:40:10.192040Z","shell.execute_reply.started":"2024-06-09T13:40:10.186768Z","shell.execute_reply":"2024-06-09T13:40:10.190954Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Le dossiers des images\nDATA = \"/kaggle/input/datatot/data/tot\"","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:10.196501Z","iopub.execute_input":"2024-06-09T13:40:10.196796Z","iopub.status.idle":"2024-06-09T13:40:10.204943Z","shell.execute_reply.started":"2024-06-09T13:40:10.196772Z","shell.execute_reply":"2024-06-09T13:40:10.204155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# La liste des noms des images de défauts\nLISTE_DEFAUT = [\n    #\"LH_00044_04_OK (2).bmp\",\n    #\"LH_00252_04_OK (2).bmp\",\n    \"LH_01724_04_OK.bmp\",\n    \"LH_03044_04_OK.bmp\",\n    \"LH_03084_04_OK (2).bmp\",\n    \"LH_03092_04_OK (2).bmp\",\n    \"LH_03196_04_OK.bmp\",\n    \"LH_03500_04_OK (2).bmp\",\n    \"LH_03548_04_OK (2).bmp\",\n    \"LH_03612_04_OK (2).bmp\",\n    \"LH_03684_04_OK (2).bmp\",\n    \"LH_03892_04_OK.bmp\",\n    \"LH_04052_04_OK (2).bmp\",\n    \"LH_04364_04_OK.bmp\",\n    #\"LH_05468_04_OK (2).bmp\",\n    \"LH_06380_04_OK (2).bmp\",\n    \"LH_06388_04_OK (2).bmp\",\n    \"LH_06436_04_OK (2).bmp\",\n    \"LH_06876_04_OK (2).bmp\",\n    \"LH_07612_04_OK (2).bmp\",\n    \"LH_07868_04_OK (2).bmp\",\n    \"LH_09364_04_OK.bmp\",\n    \"LH_09780_04_OK (2).bmp\",\n    \"LH_11356_04_OK.bmp\",\n    \"LH_11788_04_OK.bmp\",\n    \"LH_12724_04_OK (2).bmp\",\n    \"LH_15012_04_OK (2).bmp\",\n    \"LH_15780_04_OK (2).bmp\",\n    \"LH_18428_04_OK.bmp\",\n    \"LH_18772_04_OK.bmp\",\n    \"LH_19996_04_OK.bmp\",\n    \"LH_20004_04_OK.bmp\",\n    \"LH_20100_04_OK.bmp\",\n    \"LH_20308_04_OK.bmp\",\n    \"LH_21956_04_OK.bmp\",\n    \"LH_22764_04_OK.bmp\",\n    \"LH_23076_04_OK.bmp\",\n    \"LH_48772_04_OK.bmp\",\n    \"LH_49236_04_OK.bmp\",\n    \"LH_49612_04_OK.bmp\",\n    \"LH_50220_04_OK.bmp\",\n    \"LH_50508_04_OK.bmp\",\n    #\"LH_52660_04_OK.bmp\"\n]","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:10.215332Z","iopub.execute_input":"2024-06-09T13:40:10.215655Z","iopub.status.idle":"2024-06-09T13:40:10.222251Z","shell.execute_reply.started":"2024-06-09T13:40:10.215631Z","shell.execute_reply":"2024-06-09T13:40:10.221337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n# Visualisons les images de défaut pour l'entraînement\nfig, ax = plt.subplots(1+len(LISTE_DEFAUT)//4, 4, figsize=(30,90))\nax = ax.flatten()\nfor idx, path in enumerate(LISTE_DEFAUT):\n    img = os.path.join(DATA, path)\n    ax[idx].imshow(plt.imread(img))\n    ax[idx].set_title(path, fontsize=20)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:10.223740Z","iopub.execute_input":"2024-06-09T13:40:10.224039Z","iopub.status.idle":"2024-06-09T13:40:22.468777Z","shell.execute_reply.started":"2024-06-09T13:40:10.224014Z","shell.execute_reply":"2024-06-09T13:40:22.467113Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Création d'un dossier TRAIN\nos.makedirs(\"/kaggle/working/TRAIN\", exist_ok=True)\nTRAIN = \"/kaggle/working/TRAIN\"","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:22.471574Z","iopub.execute_input":"2024-06-09T13:40:22.472064Z","iopub.status.idle":"2024-06-09T13:40:22.478489Z","shell.execute_reply.started":"2024-06-09T13:40:22.472017Z","shell.execute_reply":"2024-06-09T13:40:22.477330Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n# time 1min5\n# Séparation de TRAIN en dossier d'images C et d'images NC\nos.makedirs(\"/kaggle/working/TRAIN/C\", exist_ok=True)\nos.makedirs(\"/kaggle/working/TRAIN/NC\", exist_ok=True)\n\nfor img in tqdm(os.listdir(DATA)):\n    if img in LISTE_DEFAUT:\n        shutil.copyfile(os.path.join(DATA,img), os.path.join(\"/kaggle/working/TRAIN/NC\",img))\n        #print(os.path.join(\"/kaggle/working/TRAIN/NC\",img))\n        #print(\"/kaggle/working/TRAIN/NC/\"+str(img))\n    else:\n        shutil.copyfile(os.path.join(DATA,img),os.path.join(\"/kaggle/working/TRAIN/C\",img))\n        #print(os.path.join(\"/kaggle/working/TRAIN/C\",img))\n        \nprint(\"Found \",len(os.listdir(\"/kaggle/working/TRAIN/C\")),\" images belonging to C class\")\nprint(\"Found \",len(os.listdir(\"/kaggle/working/TRAIN/NC\")),\" images belonging to NC class\")","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:22.479766Z","iopub.execute_input":"2024-06-09T13:40:22.480063Z","iopub.status.idle":"2024-06-09T13:40:30.936160Z","shell.execute_reply.started":"2024-06-09T13:40:22.480039Z","shell.execute_reply":"2024-06-09T13:40:30.935197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Première approche: images non préparées","metadata":{}},{"cell_type":"markdown","source":"## Data augmentation","metadata":{}},{"cell_type":"code","source":"# Créer un générateur d'images avec augmentation de données\ndatagen_train = ImageDataGenerator(rescale=1./255,\n                                   rotation_range=1,\n                                   width_shift_range=0.2,\n                                   height_shift_range=False,\n                                   horizontal_flip=False,\n                                   validation_split=0.25,\n                                   preprocessing_function=preprocess_input)\n\ndatagen_test = ImageDataGenerator(rescale=1./255,\n                               height_shift_range=False,\n                               horizontal_flip=False,\n                               validation_split=0,\n                               preprocessing_function=preprocess_input)\n\n# Charger les images depuis le répertoire\ntrain_generator = datagen_train.flow_from_directory(\n    TRAIN,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset='training'\n)\n\nval_generator = datagen_train.flow_from_directory(\n    TRAIN,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset='validation'\n)\n\ntest_generator = datagen_test.flow_from_directory(\n    TRAIN,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset=None\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:30.938324Z","iopub.execute_input":"2024-06-09T13:40:30.938616Z","iopub.status.idle":"2024-06-09T13:40:31.313607Z","shell.execute_reply.started":"2024-06-09T13:40:30.938591Z","shell.execute_reply":"2024-06-09T13:40:31.312598Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Visualisation d'images","metadata":{}},{"cell_type":"code","source":"os.listdir(os.path.join(TRAIN,\"NC\"))","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:31.314922Z","iopub.execute_input":"2024-06-09T13:40:31.315721Z","iopub.status.idle":"2024-06-09T13:40:31.323460Z","shell.execute_reply.started":"2024-06-09T13:40:31.315667Z","shell.execute_reply":"2024-06-09T13:40:31.322506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Visualisons quelques images\nfig, ax = plt.subplots(2,2,figsize=(4,4))\nk = 0\nfor i in range(2):\n    for j in range(2):\n        image_path = str(os.listdir(os.path.join(TRAIN,\"NC\"))[k])\n        image_path = TRAIN + r\"/NC/\" + image_path\n        ax[i][j].imshow(plt.imread(image_path))\n        ax[i][j].set_title(os.path.basename(image_path), fontsize=8)\n        k += 1","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:31.324804Z","iopub.execute_input":"2024-06-09T13:40:31.325159Z","iopub.status.idle":"2024-06-09T13:40:32.035734Z","shell.execute_reply.started":"2024-06-09T13:40:31.325128Z","shell.execute_reply":"2024-06-09T13:40:32.034820Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Instanciation et entraînement du modèle","metadata":{}},{"cell_type":"code","source":"# Charger le modèle VGG16 sans les couches supérieures (top layers)\nbase_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n\n# Figer les couches de base (optionnel)\nfor layer in base_model.layers:\n    layer.trainable = False","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:32.037160Z","iopub.execute_input":"2024-06-09T13:40:32.037558Z","iopub.status.idle":"2024-06-09T13:40:32.775606Z","shell.execute_reply.started":"2024-06-09T13:40:32.037524Z","shell.execute_reply":"2024-06-09T13:40:32.774623Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n#1h\n# Ajouter des couches personnalisées pour la classification\nmodel = Sequential([\n    base_model,\n    Flatten(),\n    Dense(256, activation='relu'),\n    Dense(train_generator.num_classes, activation='softmax')\n])\n\n# Compiler le modèle\nmodel.compile(optimizer=Adam(learning_rate=0.0001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Création du callback\nmodel_save_path = \"/kaggle/working/models/model_tot.keras\"\ncheckpoint = ModelCheckpoint(model_save_path, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\nes = EarlyStopping(monitor='loss', mode='min', verbose=1, patience=5)\ncallbacks_list = [checkpoint, es]\n\n# Entraîner le modèle\nmodel.fit(\n    train_generator,\n    epochs=10,\n    callbacks=callbacks_list,\n    validation_data=val_generator\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:40:32.776915Z","iopub.execute_input":"2024-06-09T13:40:32.777214Z","iopub.status.idle":"2024-06-09T13:53:50.157400Z","shell.execute_reply.started":"2024-06-09T13:40:32.777189Z","shell.execute_reply":"2024-06-09T13:53:50.156473Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Evaluation du modèle","metadata":{}},{"cell_type":"code","source":"# Score du dernier epoch\n\nloss, accuracy = model.evaluate(train_generator, verbose=True)\nprint(\"Training Accuracy   : {:.4f}\".format(accuracy))\nprint()\nloss, accuracy = model.evaluate(val_generator, verbose=True)\nprint(\"Validation Accuracy :  {:.4f}\".format(accuracy))","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:53:50.158609Z","iopub.execute_input":"2024-06-09T13:53:50.158919Z","iopub.status.idle":"2024-06-09T13:55:09.058369Z","shell.execute_reply.started":"2024-06-09T13:53:50.158893Z","shell.execute_reply":"2024-06-09T13:55:09.057565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Score de l'epoch optimal\n\nmodel.load_weights(model_save_path)\n\nloss, accuracy = model.evaluate(val_generator, verbose=False)\nprint(\"Validation Accuracy :  {:.4f}\".format(accuracy))\n\nloss, accuracy = model.evaluate(test_generator, verbose=False)\nprint(\"Test Accuracy       :  {:.4f}\".format(accuracy))","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:55:09.061726Z","iopub.execute_input":"2024-06-09T13:55:09.062026Z","iopub.status.idle":"2024-06-09T13:56:07.266106Z","shell.execute_reply.started":"2024-06-09T13:55:09.062001Z","shell.execute_reply":"2024-06-09T13:56:07.265252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Prédiction des images","metadata":{}},{"cell_type":"code","source":"# Créer un générateur d'images pour la prédiction\npredict_datagen = ImageDataGenerator(\n    rescale=1./255,\n    preprocessing_function=preprocess_input\n)\n\n# Spécifiez le répertoire contenant les images pour la prédiction\nPREDICT_DIR = TRAIN #+ r\"/NOK\"\n\npredict_generator = predict_datagen.flow_from_directory(\n    PREDICT_DIR,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode=None,\n    shuffle=False\n)\n\n# Faire les prédictions\npredictions = model.predict(predict_generator, steps=len(predict_generator), verbose=1)\n\n# Récupérer les noms de fichiers pour lier les prédictions aux images\nfilenames = predict_generator.filenames","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:07.267170Z","iopub.execute_input":"2024-06-09T13:56:07.267453Z","iopub.status.idle":"2024-06-09T13:56:42.299646Z","shell.execute_reply.started":"2024-06-09T13:56:07.267426Z","shell.execute_reply":"2024-06-09T13:56:42.298656Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Exporter la liste des noms d'images prédites NC au format json\nimport json\nliste_defaut_tot = []\nfor filename, prediction in zip(filenames, predictions):\n    predicted_class = np.argmax(prediction)\n    if predicted_class == 1:\n        liste_defaut_tot.append(filename)\n\n# Convertir la liste en format JSON et l'enregistrer dans un fichier\nwith open(\"/kaggle/working/liste_images_defaut_tot.json\", \"w\") as file:\n    json.dump(liste_defaut_tot, file)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:42.301003Z","iopub.execute_input":"2024-06-09T13:56:42.301361Z","iopub.status.idle":"2024-06-09T13:56:42.338125Z","shell.execute_reply.started":"2024-06-09T13:56:42.301329Z","shell.execute_reply":"2024-06-09T13:56:42.337033Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(liste_defaut_tot)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:42.339494Z","iopub.execute_input":"2024-06-09T13:56:42.339841Z","iopub.status.idle":"2024-06-09T13:56:42.346104Z","shell.execute_reply.started":"2024-06-09T13:56:42.339814Z","shell.execute_reply":"2024-06-09T13:56:42.345132Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# test\n#assert len(liste_defaut_tot)>0, print(\"ERREUR : pas de défaut détecté\")\nif len(liste_defaut_tot) == 0 :\n    print(\"Pas de défaut détecté !\")","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:42.347812Z","iopub.execute_input":"2024-06-09T13:56:42.348190Z","iopub.status.idle":"2024-06-09T13:56:42.355814Z","shell.execute_reply.started":"2024-06-09T13:56:42.348157Z","shell.execute_reply":"2024-06-09T13:56:42.354915Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Visualiser les prédictions de défaut\n# Associer chaque fichier d'image à sa prédiction\nfig, ax = plt.subplots(1+len(liste_defaut_tot)//4, 4, figsize=(10,10))\nax = ax.flatten()\n \nfor idx, filename in enumerate(liste_defaut_tot):\n        ax[idx].imshow(plt.imread(os.path.join(DATA, os.path.basename(filename))))\n        ax[idx].set_title(os.path.basename(filename), fontsize=8)       ","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:42.357214Z","iopub.execute_input":"2024-06-09T13:56:42.357471Z","iopub.status.idle":"2024-06-09T13:56:44.661562Z","shell.execute_reply.started":"2024-06-09T13:56:42.357448Z","shell.execute_reply":"2024-06-09T13:56:44.660558Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Deuxième approche: images préparées","metadata":{}},{"cell_type":"raw","source":"on va extraire un morceau des images et on va entraîner le modèle sur ces morceaux","metadata":{}},{"cell_type":"raw","source":"on définit les bords de la fenêtre à extraire sur chaque image","metadata":{}},{"cell_type":"code","source":"img = plt.imread(r\"/kaggle/input/datatot/data/tot/LH_00004_04_OK.bmp\")\ntaille_img = img.shape\ntaille_img","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:44.662930Z","iopub.execute_input":"2024-06-09T13:56:44.663263Z","iopub.status.idle":"2024-06-09T13:56:44.670800Z","shell.execute_reply.started":"2024-06-09T13:56:44.663234Z","shell.execute_reply":"2024-06-09T13:56:44.669847Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_start, y_end = 0, int(taille_img[0]/(4*3))\nx_start, x_end = int(taille_img[1]/3.4), int(taille_img[0]/(4*3)+int(taille_img[1]/3.4))\nimg_cropped = img[y_start:y_end, x_start:x_end]\nplt.imshow(img_cropped)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:44.671997Z","iopub.execute_input":"2024-06-09T13:56:44.672262Z","iopub.status.idle":"2024-06-09T13:56:44.871668Z","shell.execute_reply.started":"2024-06-09T13:56:44.672239Z","shell.execute_reply":"2024-06-09T13:56:44.870745Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Création de nouveaux dossiers d'entraînement et de validation avec les images préparées","metadata":{}},{"cell_type":"code","source":"#crée un dossier dir_crop à partir du dossier dir avec des sous dossiers \"OK\" et \"NOK\" qui reprend les images de dir en les réduisant\ndef preparation_image(dir, dir_crop):\n    \n    for img in os.listdir(dir):#os.path.join(dir,\"C\")):\n        # Load the image\n        image_path = os.path.join(dir, img) #+ r\"/C/\" \n        image = cv2.imread(image_path)\n\n        # Define the coordinates of the top-left corner and the bottom-right corner of the window\n        #x_start, y_start = 50, 50  # Top-left corner\n        #x_end, y_end = 200, 200    # Bottom-right corner\n\n        # Crop the window\n        cropped_image = image[y_start:y_end, x_start:x_end]\n\n        # Créer le dossier s'il n'existe pas\n        dossier = dir_crop #+ r\"/C\"\n        os.makedirs(dossier, exist_ok=True)\n\n        # Chemin d'accès pour sauvegarder l'image préparée\n        cropped_image_path = os.path.join(dossier, img)\n\n        # Sauvegarder l'image au même nom que l'image d'origine\n        cv2.imwrite(cropped_image_path, cropped_image)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:44.873033Z","iopub.execute_input":"2024-06-09T13:56:44.873775Z","iopub.status.idle":"2024-06-09T13:56:44.880312Z","shell.execute_reply.started":"2024-06-09T13:56:44.873740Z","shell.execute_reply":"2024-06-09T13:56:44.879391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def preparation_image_test(dir, dir_crop):\n    \n    for img in os.listdir(dir):#os.path.join(dir)):\n        # Load the image\n        image_path = os.path.join(dir, img)\n        #+ r\"/input/\"         \n        image = cv2.imread(image_path)\n\n        # Define the coordinates of the top-left corner and the bottom-right corner of the window\n        #x_start, y_start = 50, 50  # Top-left corner\n        #x_end, y_end = 200, 200    # Bottom-right corner\n\n        # Crop the window\n        cropped_image = image[y_start:y_end, x_start:x_end]\n\n        # Créer le dossier s'il n'existe pas\n        dossier = dir_crop \n        os.makedirs(dossier, exist_ok=True)\n\n        # Chemin d'accès pour sauvegarder l'image préparée\n        cropped_image_path = os.path.join(dossier, img)\n\n        # Sauvegarder l'image au même nom que l'image d'origine\n        cv2.imwrite(cropped_image_path, cropped_image)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:44.881525Z","iopub.execute_input":"2024-06-09T13:56:44.881873Z","iopub.status.idle":"2024-06-09T13:56:44.893889Z","shell.execute_reply.started":"2024-06-09T13:56:44.881842Z","shell.execute_reply":"2024-06-09T13:56:44.892971Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%%time\n# 13s\n# Définir les chemins vers les répertoires d'entraînement et de validation\n\nDATA_CROP = \"/kaggle/working/DATA_CROP\"\nDATA_CROP_TRAIN = \"/kaggle/working/DATA_CROP_TRAIN\"\n#crop_test = \"/kaggle/working/crop_test\"\nos.makedirs(\"/kaggle/working/DATA_CROP\", exist_ok=True)\nos.makedirs(\"/kaggle/working/DATA_CROP_TRAIN/C\", exist_ok=True)\nos.makedirs(\"/kaggle/working/DATA_CROP_TRAIN/NC\", exist_ok=True)\npreparation_image_test(DATA, DATA_CROP)\npreparation_image(os.path.join(TRAIN,\"C\"), os.path.join(DATA_CROP_TRAIN, \"C\"))\npreparation_image(os.path.join(TRAIN,\"NC\"), os.path.join(DATA_CROP_TRAIN, \"NC\"))","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:44.895233Z","iopub.execute_input":"2024-06-09T13:56:44.895568Z","iopub.status.idle":"2024-06-09T13:56:58.447470Z","shell.execute_reply.started":"2024-06-09T13:56:44.895544Z","shell.execute_reply":"2024-06-09T13:56:58.446439Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Test\nassert len(os.listdir(DATA_CROP)) == len(os.listdir(DATA)), print(\"DATA_CROP et DATA pas de la même taille\")","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:58.449215Z","iopub.execute_input":"2024-06-09T13:56:58.449643Z","iopub.status.idle":"2024-06-09T13:56:58.461070Z","shell.execute_reply.started":"2024-06-09T13:56:58.449608Z","shell.execute_reply":"2024-06-09T13:56:58.460163Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Augmentation des données","metadata":{}},{"cell_type":"code","source":"# Créer un générateur d'images sans augmentation de données\ndatagen_train = ImageDataGenerator(rescale=1./255,\n                                   rotation_range=1,\n                                   width_shift_range=0.2,\n                                   height_shift_range=False,\n                                   horizontal_flip=False,\n                                   validation_split=0.25,\n                                   preprocessing_function=preprocess_input)\n\ndatagen_test = ImageDataGenerator(rescale=1./255,\n                               height_shift_range=False,\n                               horizontal_flip=False,\n                               validation_split=0,\n                               preprocessing_function=preprocess_input)\n\n# Charger les images depuis le répertoire\ntrain_generator = datagen_train.flow_from_directory(\n    DATA_CROP_TRAIN,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset='training'\n)\n\nval_generator = datagen_train.flow_from_directory(\n    DATA_CROP_TRAIN,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset='validation'\n)\n\ntest_generator = datagen_test.flow_from_directory(\n    DATA_CROP_TRAIN,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset=None\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T13:56:58.462323Z","iopub.execute_input":"2024-06-09T13:56:58.462828Z","iopub.status.idle":"2024-06-09T13:56:58.836033Z","shell.execute_reply.started":"2024-06-09T13:56:58.462796Z","shell.execute_reply":"2024-06-09T13:56:58.835235Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Instanciation et entraînement du modèle","metadata":{}},{"cell_type":"code","source":"# Ajouter des couches personnalisées pour la classification\nmodel = Sequential([\n    base_model,\n    Flatten(),\n    Dense(256, activation='relu'),\n    Dense(train_generator.num_classes, activation='softmax')\n])\n\n# Compiler le modèle\nmodel.compile(optimizer=Adam(learning_rate=0.0001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Création du callback\nmodel_save_path = \"/kaggle/working/models/model_crop_tot.keras\"\ncheckpoint = ModelCheckpoint(model_save_path, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\nes = EarlyStopping(monitor='loss', mode='min', verbose=1, patience=5)\ncallbacks_list = [checkpoint, es]\n\n# Entraîner le modèle\nmodel.fit(\n    train_generator,\n    epochs=50,\n    callbacks=callbacks_list,\n    validation_data=val_generator\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:16:09.927806Z","iopub.execute_input":"2024-06-09T14:16:09.928666Z","iopub.status.idle":"2024-06-09T14:41:42.047656Z","shell.execute_reply.started":"2024-06-09T14:16:09.928632Z","shell.execute_reply":"2024-06-09T14:41:42.046877Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Evaluation du modèle","metadata":{}},{"cell_type":"code","source":"# Score du dernier epoch\n\nloss, accuracy = model.evaluate(train_generator, verbose=True)\nprint(\"Training Accuracy   : {:.4f}\".format(accuracy))\nprint()\nloss, accuracy = model.evaluate(val_generator, verbose=True)\nprint(\"Validation Accuracy :  {:.4f}\".format(accuracy))","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:41:42.049511Z","iopub.execute_input":"2024-06-09T14:41:42.049814Z","iopub.status.idle":"2024-06-09T14:42:58.190570Z","shell.execute_reply.started":"2024-06-09T14:41:42.049789Z","shell.execute_reply":"2024-06-09T14:42:58.189819Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Score de l'epoch optimal\n\nmodel.load_weights(model_save_path)\n\nloss, accuracy = model.evaluate(val_generator, verbose=False)\nprint(\"Validation Accuracy :  {:.4f}\".format(accuracy))\n\nloss, accuracy = model.evaluate(test_generator, verbose=False)\nprint(\"Test Accuracy       :  {:.4f}\".format(accuracy))","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:42:58.191577Z","iopub.execute_input":"2024-06-09T14:42:58.191862Z","iopub.status.idle":"2024-06-09T14:43:56.105280Z","shell.execute_reply.started":"2024-06-09T14:42:58.191837Z","shell.execute_reply":"2024-06-09T14:43:56.104414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Créer un générateur d'images pour la prédiction\npredict_datagen = ImageDataGenerator(\n    rescale=1./255,\n    preprocessing_function=preprocess_input\n)\n\n# Spécifiez le répertoire contenant les images pour la prédiction\nPREDICT_DIR = DATA_CROP_TRAIN #+ r\"/NOK\"\n\npredict_generator = predict_datagen.flow_from_directory(\n    PREDICT_DIR,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode=None,\n    shuffle=False\n)\n\n# Faire les prédictions\npredictions = model.predict(predict_generator, steps=len(predict_generator), verbose=1)\n\n# Récupérer les noms de fichiers pour lier les prédictions aux images\nfilenames = predict_generator.filenames","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:43:56.107307Z","iopub.execute_input":"2024-06-09T14:43:56.107602Z","iopub.status.idle":"2024-06-09T14:44:29.556207Z","shell.execute_reply.started":"2024-06-09T14:43:56.107577Z","shell.execute_reply":"2024-06-09T14:44:29.555363Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Exporter la liste des fichier au format json\nliste_defaut_crop = []\nfor filename, prediction in zip(filenames, predictions):\n    predicted_class = np.argmax(prediction)\n    if predicted_class == 1:\n        liste_defaut_crop.append(filename)\n\n# Convertir la liste en format JSON et l'enregistrer dans un fichier\nwith open(\"liste_images_defaut_crop.json\", \"w\") as file:\n    json.dump(liste_defaut_crop, file)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:44:29.557567Z","iopub.execute_input":"2024-06-09T14:44:29.557971Z","iopub.status.idle":"2024-06-09T14:44:29.591949Z","shell.execute_reply.started":"2024-06-09T14:44:29.557937Z","shell.execute_reply":"2024-06-09T14:44:29.591184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# test\n#assert len(liste_defaut_crop)>0, print(\"ERREUR : pas de défaut détecté\")\nif len(liste_defaut_crop) == 0 :\n    print(\"Pas de défaut détecté !\")","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:44:29.592881Z","iopub.execute_input":"2024-06-09T14:44:29.593129Z","iopub.status.idle":"2024-06-09T14:44:29.597915Z","shell.execute_reply.started":"2024-06-09T14:44:29.593108Z","shell.execute_reply":"2024-06-09T14:44:29.597060Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Visualiser les prédictions de défaut\n# Associer chaque fichier d'image à sa prédiction\nfig, ax = plt.subplots(1+len(liste_defaut_crop)//4, 4, figsize=(30,30))\nax = ax.flatten()\n \nfor idx, filename in enumerate(liste_defaut_crop):\n        ax[idx].imshow(plt.imread(os.path.join(DATA, os.path.basename(filename))))\n        ax[idx].set_title(os.path.basename(filename), fontsize=14)           ","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:58:19.662802Z","iopub.execute_input":"2024-06-09T14:58:19.663196Z","iopub.status.idle":"2024-06-09T14:58:28.246605Z","shell.execute_reply.started":"2024-06-09T14:58:19.663166Z","shell.execute_reply":"2024-06-09T14:58:28.245415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Zip des modèles\n# Export as Zipfile\nimport zipfile\n\nsource_dir = '/kaggle/working/models'\nzip_file = '/kaggle/working/models.zip'\n\nwith zipfile.ZipFile(zip_file, 'w') as zip_ref:\n    # Iterate through the contents of the source folder\n    for root, _, files in os.walk(source_dir):\n        for file in files:\n            # Create a relative path for each file\n            file_path = os.path.join(root, file)\n\n            # Add the file to the ZIP archive\n            zip_ref.write(file_path, arcname=file)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:59:06.355022Z","iopub.execute_input":"2024-06-09T14:59:06.355392Z","iopub.status.idle":"2024-06-09T14:59:07.178893Z","shell.execute_reply.started":"2024-06-09T14:59:06.355364Z","shell.execute_reply":"2024-06-09T14:59:07.177848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Comparaison de la liste défaut d'entrée et de celle de sortie\npprint(LISTE_DEFAUT) \npprint(liste_defaut_crop)","metadata":{"execution":{"iopub.status.busy":"2024-06-09T14:59:12.134719Z","iopub.execute_input":"2024-06-09T14:59:12.135103Z","iopub.status.idle":"2024-06-09T14:59:12.140588Z","shell.execute_reply.started":"2024-06-09T14:59:12.135071Z","shell.execute_reply":"2024-06-09T14:59:12.139733Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.imshow(plt.imread(os.path.join(DATA,'LH_00572_04_OK.bmp')))","metadata":{"execution":{"iopub.status.busy":"2024-06-09T15:04:08.249318Z","iopub.execute_input":"2024-06-09T15:04:08.250036Z","iopub.status.idle":"2024-06-09T15:04:08.595240Z","shell.execute_reply.started":"2024-06-09T15:04:08.250000Z","shell.execute_reply":"2024-06-09T15:04:08.594225Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.imshow(plt.imread(os.path.join(DATA,'LH_49236_04_OK.bmp')))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-09T15:01:49.809570Z","iopub.execute_input":"2024-06-09T15:01:49.810256Z","iopub.status.idle":"2024-06-09T15:01:50.146058Z","shell.execute_reply.started":"2024-06-09T15:01:49.810221Z","shell.execute_reply":"2024-06-09T15:01:50.145100Z"},"trusted":true},"execution_count":null,"outputs":[]}]}