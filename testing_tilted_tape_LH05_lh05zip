{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8657156,"sourceType":"datasetVersion","datasetId":5186409},{"sourceId":8681061,"sourceType":"datasetVersion","datasetId":5204180},{"sourceId":8709459,"sourceType":"datasetVersion","datasetId":5224472},{"sourceId":8719276,"sourceType":"datasetVersion","datasetId":5231752},{"sourceId":8773628,"sourceType":"datasetVersion","datasetId":5272853},{"sourceId":8780911,"sourceType":"datasetVersion","datasetId":5278152},{"sourceId":8792073,"sourceType":"datasetVersion","datasetId":5286184},{"sourceId":8799904,"sourceType":"datasetVersion","datasetId":5291716},{"sourceId":8801780,"sourceType":"datasetVersion","datasetId":5293139},{"sourceId":8809717,"sourceType":"datasetVersion","datasetId":5298835},{"sourceId":8810488,"sourceType":"datasetVersion","datasetId":5299426},{"sourceId":8810612,"sourceType":"datasetVersion","datasetId":5299529},{"sourceId":63937,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":53320},{"sourceId":69921,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":58357},{"sourceId":70299,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":58685}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# TESTING TILTED_TAPE_LH_05_","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport os\nimport time\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nimport keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import preprocess_input","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-29T15:50:32.633199Z","iopub.execute_input":"2024-06-29T15:50:32.634278Z","iopub.status.idle":"2024-06-29T15:50:48.078098Z","shell.execute_reply.started":"2024-06-29T15:50:32.634228Z","shell.execute_reply":"2024-06-29T15:50:48.077115Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-06-29 15:50:36.173325: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-29 15:50:36.173464: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-29 15:50:36.330540: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"DATA = r\"/kaggle/input/lh05zip/LH_05_\"\n#MODEL = keras.saving.load_model(\"/kaggle/input/tilted_tape_lh05/keras/model_tilted_tape_lh05/1/model_tilted_tape_LH05.keras\")","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:50:48.080024Z","iopub.execute_input":"2024-06-29T15:50:48.080639Z","iopub.status.idle":"2024-06-29T15:50:48.085634Z","shell.execute_reply.started":"2024-06-29T15:50:48.080607Z","shell.execute_reply":"2024-06-29T15:50:48.084470Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Choix défaut\n\n#NOM_DEFAUT = \"LH03_missing_tape\"\n#NOM_DEFAUT = \"LH05_double_tape\"\nNOM_DEFAUT = \"LH05_tilted_tape\"","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:50:48.092907Z","iopub.execute_input":"2024-06-29T15:50:48.093277Z","iopub.status.idle":"2024-06-29T15:50:48.132138Z","shell.execute_reply.started":"2024-06-29T15:50:48.093246Z","shell.execute_reply":"2024-06-29T15:50:48.130902Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"match = {\"LH03_missing_tape\":[\"LH\",\n                              \"_03_\",\n                              \"/kaggle/input/missing_tape_lh03/keras/missing_tape_lh03/1/model_missing_tape_LH03.keras\",0.09,0.18,0.05,0.25],\n        \"LH05_double_tape\":[\"LH\",\n                            \"_05_\",\n                            \"/kaggle/input/model_tot_crop/keras/model_crop_tot/1/model_crop_tot.keras\",0.4,0.65,0.78,1],\n        \"LH05_tilted_tape\":[\"LH\",\n                            \"_05_\",\n                            \"/kaggle/input/tilted_tape_lh05/keras/model_tilted_tape_lh05/1/model_tilted_tape_LH05.keras\",0.4,0.65,0.78,1]}","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:50:48.133730Z","iopub.execute_input":"2024-06-29T15:50:48.134639Z","iopub.status.idle":"2024-06-29T15:50:48.145594Z","shell.execute_reply.started":"2024-06-29T15:50:48.134592Z","shell.execute_reply":"2024-06-29T15:50:48.144156Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"PREFIX = match[NOM_DEFAUT][0]\nSUFFIX = match[NOM_DEFAUT][1]\nMODEL = keras.saving.load_model(match[NOM_DEFAUT][2])\nCOEF_X1 = match[NOM_DEFAUT][3]\nCOEF_X2 = match[NOM_DEFAUT][4]\nCOEF_Y1 = match[NOM_DEFAUT][5]\nCOEF_Y2 = match[NOM_DEFAUT][6]","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:59:42.355550Z","iopub.execute_input":"2024-06-29T15:59:42.356655Z","iopub.status.idle":"2024-06-29T15:59:44.503690Z","shell.execute_reply.started":"2024-06-29T15:59:42.356603Z","shell.execute_reply":"2024-06-29T15:59:44.502543Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"print(PREFIX, SUFFIX, MODEL, COEF_X1, COEF_X2, COEF_Y1, COEF_Y2)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:59:48.972441Z","iopub.execute_input":"2024-06-29T15:59:48.972822Z","iopub.status.idle":"2024-06-29T15:59:48.978680Z","shell.execute_reply.started":"2024-06-29T15:59:48.972793Z","shell.execute_reply":"2024-06-29T15:59:48.977512Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"LH _05_ <Sequential name=sequential_1, built=True> 0.4 0.65 0.78 1\n","output_type":"stream"}]},{"cell_type":"code","source":"# Préparation des images\nimg = plt.imread(r\"/kaggle/input/archive23lh05zip/archive_23_LH05/LH_15103_05_OK.bmp\")\ntaille_image = img.shape\ntaille_image","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:51:15.866527Z","iopub.execute_input":"2024-06-29T15:51:15.866947Z","iopub.status.idle":"2024-06-29T15:51:15.895725Z","shell.execute_reply.started":"2024-06-29T15:51:15.866914Z","shell.execute_reply":"2024-06-29T15:51:15.894594Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(240, 320, 3)"},"metadata":{}}]},{"cell_type":"code","source":"y_start, y_end = int(taille_image[0]*COEF_Y1), int(taille_image[0]*COEF_Y2)\nx_start, x_end = int(taille_image[1]*COEF_X1), int(taille_image[0]*COEF_X2)\nimg_cropped = img[y_start:y_end, x_start:x_end]\nplt.imshow(img_cropped)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:52:00.175142Z","iopub.execute_input":"2024-06-29T15:52:00.176021Z","iopub.status.idle":"2024-06-29T15:52:00.381475Z","shell.execute_reply.started":"2024-06-29T15:52:00.175986Z","shell.execute_reply":"2024-06-29T15:52:00.380371Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<matplotlib.image.AxesImage at 0x78d72fe55570>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"def preparation_image_test(dir, dir_crop):\n    \n    for img in os.listdir(dir):#os.path.join(dir)):\n        # Load the image\n        image_path = os.path.join(dir, img)\n        #+ r\"/input/\"         \n        image = cv2.imread(image_path)\n\n        # Define the coordinates of the top-left corner and the bottom-right corner of the window\n        #x_start, y_start = 50, 50  # Top-left corner\n        #x_end, y_end = 200, 200    # Bottom-right corner\n\n        # Crop the window\n        cropped_image = image[y_start:y_end, x_start:x_end]\n\n        # Créer le dossier s'il n'existe pas\n        dossier = dir_crop \n        os.makedirs(dossier, exist_ok=True)\n\n        # Chemin d'accès pour sauvegarder l'image préparée\n        cropped_image_path = os.path.join(dossier, img)\n\n        # Sauvegarder l'image au même nom que l'image d'origine\n        cv2.imwrite(cropped_image_path, cropped_image)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:52:18.962298Z","iopub.execute_input":"2024-06-29T15:52:18.962718Z","iopub.status.idle":"2024-06-29T15:52:18.970576Z","shell.execute_reply.started":"2024-06-29T15:52:18.962685Z","shell.execute_reply":"2024-06-29T15:52:18.969311Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"DATA_CROP = \"DATA_CROP/crop\"\npreparation_image_test(DATA, DATA_CROP)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:52:32.043510Z","iopub.execute_input":"2024-06-29T15:52:32.043903Z","iopub.status.idle":"2024-06-29T15:52:47.249009Z","shell.execute_reply.started":"2024-06-29T15:52:32.043875Z","shell.execute_reply":"2024-06-29T15:52:47.247847Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# Inférence\ndatagen_test = ImageDataGenerator(rescale=1./255,\n                               height_shift_range=False,\n                               horizontal_flip=False,\n                               validation_split=0,\n                               preprocessing_function=preprocess_input)\n\ntest_generator = datagen_test.flow_from_directory(\n    \"DATA_CROP\",\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode='categorical',\n    subset=None\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T15:52:57.493122Z","iopub.execute_input":"2024-06-29T15:52:57.494205Z","iopub.status.idle":"2024-06-29T15:52:57.579443Z","shell.execute_reply.started":"2024-06-29T15:52:57.494161Z","shell.execute_reply":"2024-06-29T15:52:57.578301Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Found 1906 images belonging to 1 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"%%time\n#35s pour 7000 images\n\n# Créer un générateur d'images pour la prédiction\npredict_datagen = ImageDataGenerator(\n    rescale=1./255,\n    preprocessing_function=preprocess_input\n)\n\n# Spécifiez le répertoire contenant le répertoire contenant les images pour la prédiction\nPREDICT_DIR = \"DATA_CROP\" #+ r\"/NOK\"\n\npredict_generator = predict_datagen.flow_from_directory(\n    PREDICT_DIR,\n    target_size=(224, 224),\n    batch_size=1,\n    class_mode=None,\n    shuffle=False,\n    seed=42\n)\n\n# Faire les prédictions\npredictions = MODEL.predict(predict_generator, steps=len(predict_generator), verbose=1)\n\n# Récupérer les noms de fichiers pour lier les prédictions aux images\nfilenames = predict_generator.filenames\n\n# Associer chaque fichier d'image à sa prédiction\nliste_defaut = []\nfor filename, prediction in zip(filenames, predictions):\n    predicted_class = np.argmax(prediction)\n    if predicted_class == 1:\n        print(f\"Image: {filename} - Prediction: {predicted_class}\")\n        liste_defaut.append(filename)","metadata":{"execution":{"iopub.status.busy":"2024-06-29T16:01:06.608417Z","iopub.execute_input":"2024-06-29T16:01:06.609185Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Found 1906 images belonging to 1 classes.\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m1038/1906\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m3:59\u001b[0m 276ms/step","output_type":"stream"}]},{"cell_type":"code","source":"os.makedirs(\"/kaggle/working/resultat\",exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T12:03:24.893545Z","iopub.execute_input":"2024-06-28T12:03:24.893965Z","iopub.status.idle":"2024-06-28T12:03:24.899476Z","shell.execute_reply.started":"2024-06-28T12:03:24.893924Z","shell.execute_reply":"2024-06-28T12:03:24.898269Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Visualisation des défauts\nfig, ax = plt.subplots(1+len(liste_defaut)//3, 3, figsize=(15,40))\nax = ax.flatten()\nfor idx, filename in enumerate(liste_defaut) : \n    filename_tot = os.path.join(DATA, os.path.basename(filename))\n    #cv2.imwrite(os.path.join(\"/kaggle/working/resultat\",os.path.basename(filename)), cv2.imread(filename_tot))\n    ax[idx].imshow(plt.imread(filename_tot))\n    date_creation = time.ctime(os.path.getmtime(filename_tot))\n    ax[idx].set_title(f\"{os.path.basename(filename_tot)} {date_creation}\",fontsize=6)\n    ax[idx].axis('off')","metadata":{"execution":{"iopub.status.busy":"2024-06-28T12:03:24.901082Z","iopub.execute_input":"2024-06-28T12:03:24.901790Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Exporter la liste des images NC\nexport = pd.DataFrame({NOM_DEFAUT:liste_defaut})\nexport.to_csv(\"resultat.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T12:04:20.575769Z","iopub.status.idle":"2024-06-28T12:04:20.576364Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Exporter les images NC dans un zipfile\nimport zipfile\n\nsource_dir = \"/kaggle/working/resultat\" \nzip_file = '/kaggle/working/resultat.zip'\n\nwith zipfile.ZipFile(zip_file, 'w') as zip_ref: \n    # Iterate through the contents of the source folder \n    for root, _, files in os.walk(source_dir): \n        for file in files: # Create a relative path for each file \n            file_path = os.path.join(root, file)\n            # Add the file to the ZIP archive\n            zip_ref.write(file_path, arcname=file)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T12:04:20.578728Z","iopub.status.idle":"2024-06-28T12:04:20.579311Z"},"trusted":true},"execution_count":null,"outputs":[]}]}